##########################################################################################################
fragment lab1/matrix_multiplication.py
##########################################################################################################

def add_m(A, B):
    if len(A) != len(B) or len(A[0]) != len(B[0]):
        raise ValueError
    X, Y = len(A), len(A[0])
    return [[A[row][col]+B[row][col] for col in range(Y)] for row in range(X)]


def sub_m(A, B):
    if len(A) != len(B) or len(A[0]) != len(B[0]):
        raise ValueError
    X, Y = len(A), len(A[0])
    return [[A[row][col]-B[row][col] for col in range(Y)] for row in range(X)]


def strassen_r(A, B):
    K, L, M = len(A), len(B), len(B[0])

    if K == 1 and L == 1 and M == 1:
        return [[A[0][0] * B[0][0]]], 1

    A11 = [[A[i][j] for j in range(0, L // 2)] for i in range(0, K // 2)]
    A12 = [[A[i][j] for j in range(L // 2, L)] for i in range(0, K // 2)]
    A21 = [[A[i][j] for j in range(0, L // 2)] for i in range(K // 2, K)]
    A22 = [[A[i][j] for j in range(L // 2, L)] for i in range(K // 2, K)]

    B11 = [[B[i][j] for j in range(0, M // 2)] for i in range(0, L // 2)]
    B12 = [[B[i][j] for j in range(M // 2, M)] for i in range(0, L // 2)]
    B21 = [[B[i][j] for j in range(0, M // 2)] for i in range(L // 2, L)]
    B22 = [[B[i][j] for j in range(M // 2, M)] for i in range(L // 2, L)]

    C = [[0 for j in range(M)] for i in range(K)]
    S = 0

    P1, c1 = strassen_r(add_m(A11, A22), add_m(B11, B22))
    S += c1 + (len(A11)*len(A11[0]) + len(B11)*len(B11[0])) # number of floating point additions for the poperation

    P2, c2 = strassen_r(add_m(A21, A22), B11)
    S += c2 + len(A21)*len(A21[0])

    P3, c3 = strassen_r(A11, sub_m(B12, B22))
    S += c3 + len(B12)*len(B12[0])

    P4, c4 = strassen_r(A22, sub_m(B21, B11))
    S += c4 + len(B12)*len(B12[0])

    P5, c5 = strassen_r(add_m(A11, A12), B22)
    S += len(A11)*len(A11[0])

    P6, c6 = strassen_r(sub_m(A21, A11), add_m(B11, B12))
    S += c6 + (len(A21) * len(A21[0]) + len(B11) * len(B11[0]))

    P7, c7 = strassen_r(sub_m(A12, A22), add_m(B21, B22))
    S += c7 + (len(A12)*len(A12[0]) + len(B21)*len(B21[0]))



    C11 = add_m(sub_m(add_m(P1, P4), P5), P7)
    S += 3 * len(P1)*len(P1[0])

    C12 = add_m(P3, P5)
    S += 3 * len(P3)*len(P3[0])

    C21 = add_m(P2, P4)
    S += 3 * len(P2) * len(P2[0])

    C22 = add_m(add_m(sub_m(P1, P2), P3), P6)
    S += 3 * len(P1) * len(P1[0])

    for i in range(K // 2):
        for j in range(M // 2):
            C[i][j] += C11[i][j]

    for i in range(K // 2):
        for j in range(M - M // 2):
            C[i][M//2+j] += C12[i][j]

    for i in range(K - K // 2):
        for j in range(M // 2):
            C[K//2+i][j] = C21[i][j]

    for i in range(K - K // 2):
        for j in range(M - M // 2):
            # C[K // 2 + i][M // 2 + j] += A21B12[i][j] + A22B22[i][j]
            C[K//2 + i][M//2+j] = C22[i][j]

    return C, S


def strassen(A, B):
    k = max(len(A), len(B), len(B[0]))
    k = 2**int(ceil(log(k, 2)))

    A0 = [[0 for _ in range(k)] for _ in range(k)]
    B0 = [[0 for _ in range(k)] for _ in range(k)]

    for i in range(len(A)):
        for j in range(len(A[0])):
            A0[i][j] = A[i][j]

    for i in range(len(B)):
        for j in range(len(B[0])):
            B0[i][j] = B[i][j]

    C0, S = strassen_r(A0, B0)
    C = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]

    for i in range(len(A)):
        for j in range(len(B[0])):
            C[i][j] = C0[i][j]

    return C, S


##########################################################################################################
lab2.py
##########################################################################################################

from lab1.matrix_multiplication import strassen
import numpy as np
import time

def inv(M):
    k = len(M)//2
    if k == 0:
        return [[1/M[0][0]]], 1

    # splitting the input into A11, A12, A21, A22
    A11 = [[ M[i][j] for j in range(k)] for i in range(k)]
    A12 = [[ M[i][j] for j in range(k,2*k)] for i in range(k)]
    A21 = [[ M[i][j] for j in range(k)] for i in range(k,2*k)]
    A22 = [[ M[i][j] for j in range(k,2*k)] for i in range(k,2*k)]

    # inverting A11 and initializing p
    invA11, p = inv(A11)

    # calculating S22
    Q1, i = strassen(invA11,A12)
    p += i
    Q2, i = strassen(A21,Q1)
    p += i
    S22 = [[ A22[i][j] - Q2[i][j] for j in range(k)] for i in range(k)]
    p += k**2

    # inverting S22
    invS22, i = inv(S22)
    p += i

    # getting the top left result
    Q1, i = strassen(A21,invA11)
    p += i
    Q2, i = strassen(invS22,Q1)
    p += i
    Q3, i = strassen(A12,Q2)
    p += i
    Q4, i = strassen(invA11,Q3)
    p += i
    B11 = [[ invA11[i][j] + Q4[i][j] for j in range(k)] for i in range(k)]
    p += k**2

    # getting the negated top right result
    Q1, i = strassen(A12,invS22)
    p += i
    negB12, i = strassen(invA11,Q1)
    p += i

    # getting the negated bottom left result
    Q1, i = strassen(A21,invA11)
    p +=i
    negB21, i = strassen(invS22,Q1)
    p+= i


    # initializing the result
    B = [[None for i in range(2*k)]for j in range(2*k)]

    # bottom right corner
    for i in range(k):
        for j in range(k):
            B[i][j] = B11[i][j]
            B[k+i][k+j] = invS22[i][j]
            B[i][k+j] = -negB12[i][j]
            B[k+i][j] = -negB21[i][j]

    return B, p


def lu(M):
    k = len(M) // 2
    if k == 0:
        return [[1]], M, 0

    # splitting the input into A11, A12, A21, A22
    A11 = [[M[i][j] for j in range(k)] for i in range(k)]
    A12 = [[M[i][j] for j in range(k, 2 * k)] for i in range(k)]
    A21 = [[M[i][j] for j in range(k)] for i in range(k, 2 * k)]
    S = [[M[i][j] for j in range(k, 2 * k)] for i in range(k, 2 * k)]

    # factorizing A11 into L11 and U11
    L11, U11, p = lu(A11)

    # inverting L11 and U11
    invL11,i = inv(L11)
    p += i
    invU11,i = inv(U11)
    p += i

    # calculating U12 and L21
    U12, i = strassen(invL11,A12)
    p+=i
    L21, i = strassen(A21,invU11)
    p+=i

    # calculating S
    Q1, i = strassen(L21,U12)
    p+=i
    for i in range(k):
        for j in range(k):
            S[i][j] -= Q1[i][j]
    p+= k**2

    # factorizing S into Ls and Us
    Ls, Us, i = lu(S)
    p+=i

    # initializing and filling L and U (result)
    L = [[0 for i in range(2*k)] for i in range(2*k)]
    U = [[0 for i in range(2 * k)] for i in range(2 * k)]
    for i in range(k):
        for j in range(k):
            L[i][j] = L11[i][j]
            L[k + i][k + j] = Ls[i][j]
            L[k + i][j] = L21[i][j]
            U[i][j] = U11[i][j]
            U[k+i][k+j] = Us[i][j]
            U[i][k+j] = U12[i][j]
    return L, U, p


def det(M):
    L, U, p = lu(M)
    n = len(M)
    result = U[0][0]
    for i in range(1, n):
        result *= U[i][i]
    return result, p + n - 1


def test():
    matrix = [[1,-2,-2,-3],
            [3,-9,0,-9],
            [-1,2,4,7],
            [-3,-6,26,2]]
    L, U, p = lu(matrix)
    # for i in range(len(L)):
    #     print(L[i], "\t\t", U[i])

    assert np.isclose(np.array([[1, 0, 0, 0], [3, 1, 0, 0], [-1, 0, 1, 0], [-3, 4, -2, 1]]), np.array(L)).all()
    assert np.isclose(np.array([[1, -2, -2, -3], [0, -3, 6, 0], [0, 0, 2, 4], [0, 0, 0, 1]]), np.array(U)).all()

def measure_lu(loops=10):
    for i in range(0, loops):
        k = 2**i
        while True:
            A = [[np.random.rand() for n in range(k)] for m in range(k)]
            B = np.array(A)
            if np.linalg.matrix_rank(B) == len(B):
                break
        
        start = time.time()
        L, U, p = lu(A)
        stop = time.time()

        print(f'{k} {stop-start} {p}')


def measure_inv(loops=10):
        for i in range(0, loops):
            k = 2**i
            while True:
                A = [[np.random.rand() for n in range(k)] for m in range(k)]
                B = np.array(A)
                if np.linalg.matrix_rank(B) == len(B):
                    break
            
            start = time.time()
            C, p = inv(A)
            stop = time.time()

            print(f'{k} {stop-start} {p}')


def measure_det(loops=10):
        for i in range(0, loops):
            k = 2**i
            while True:
                A = [[np.random.rand() for n in range(k)] for m in range(k)]
                B = np.array(A)
                if np.linalg.matrix_rank(B) == len(B):
                    break
            
            start = time.time()
            # print(A)
            C, p = det(A)
            
            stop = time.time()

            print(f'{k} {stop-start} {p}')


if __name__ == '__main__':
    test()
    measure_lu(8)



##########################################################################################################

##########################################################################################################